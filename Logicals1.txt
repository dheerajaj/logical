Question 51 :
You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.
Return true if you can reach the last index, or false otherwise.
Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.

Solution:
#include <vector>

class Solution {
public:
    bool canJump(std::vector<int>& nums) {
        int n = nums.size();
        int maxReach = 0;

        for (int i = 0; i < n; ++i) {
            if (i > maxReach) {
                // If the current index is beyond the maximum reachable position, return false
                return false;
            }

            // Update the maximum reachable position
            maxReach = std::max(maxReach, i + nums[i]);

            // If the maximum reachable position is greater than or equal to the last index, return true
            if (maxReach >= n - 1) {
                return true;
            }
        }

        return false;
    }
};

Question 52: You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].
Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:
0 <= j <= nums[i] and
i + j < n
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].

Example 1:

Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.

Solution:
#include <vector>

class Solution {
public:
    int jump(std::vector<int>& nums) {
        int n = nums.size();
        int jumps = 0;
        int currentMaxReach = 0;
        int nextMaxReach = 0;

        for (int i = 0; i < n - 1; ++i) {
            nextMaxReach = std::max(nextMaxReach, i + nums[i]);

            if (i == currentMaxReach) {
                currentMaxReach = nextMaxReach;
                jumps++;
            }
        }

        return jumps;
    }
};

Question 53: Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return the researcher's h-index.
According to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times.
Example 1:

Input: citations = [3,0,6,1,5]
Output: 3
Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.
Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.

Solution :
#include <vector>
#include <algorithm>

class Solution {
public:
    int hIndex(std::vector<int>& citations) {
        std::sort(citations.begin(), citations.end(), std::greater<int>());
        
        int n = citations.size();
        int h = 0;

        for (int i = 0; i < n; ++i) {
            if (citations[i] >= i + 1) {
                h = std::max(h, i + 1);
            } else {
                // If the current citation is less than the current index, further elements will also be less
                break;
            }
        }

        return h;
    }
};

Question 54 :Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.
 
Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]

Solution :
#include <vector>

class Solution {
public:
    std::vector<int> productExceptSelf(std::vector<int>& nums) {
        int n = nums.size();
        std::vector<int> left(n, 1);   // Initialize left array
        std::vector<int> right(n, 1);  // Initialize right array
        std::vector<int> result(n, 1); // Initialize result array

        // Compute left array
        int leftProduct = 1;
        for (int i = 1; i < n; ++i) {
            leftProduct *= nums[i - 1];
            left[i] = leftProduct;
        }

        // Compute right array
        int rightProduct = 1;
        for (int i = n - 2; i >= 0; --i) {
            rightProduct *= nums[i + 1];
            right[i] = rightProduct;
        }

        // Compute result array
        for (int i = 0; i < n; ++i) {
            result[i] = left[i] * right[i];
        }

        return result;
    }
};

Question 55 :There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].
You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.
Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique

Example 1:

Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
Output: 3
Explanation:
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
Therefore, return 3 as the starting index

solution :
#include <vector>

class Solution {
public:
    int canCompleteCircuit(std::vector<int>& gas, std::vector<int>& cost) {
        int n = gas.size();
        int totalGas = 0;
        int currentTank = 0;
        int startingStation = 0;

        for (int i = 0; i < n; ++i) {
            int netGas = gas[i] - cost[i];
            totalGas += netGas;
            currentTank += netGas;

            // If the current tank becomes negative, reset it and update the starting station
            if (currentTank < 0) {
                currentTank = 0;
                startingStation = i + 1;
            }
        }

        // If the total gas is negative, return -1; otherwise, return the starting station
        return (totalGas < 0) ? -1 : startingStation;
    }
};
