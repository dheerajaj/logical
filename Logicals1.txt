Question 51 :
You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.
Return true if you can reach the last index, or false otherwise.
Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.

Solution:
#include <vector>

class Solution {
public:
    bool canJump(std::vector<int>& nums) {
        int n = nums.size();
        int maxReach = 0;

        for (int i = 0; i < n; ++i) {
            if (i > maxReach) {
                // If the current index is beyond the maximum reachable position, return false
                return false;
            }

            // Update the maximum reachable position
            maxReach = std::max(maxReach, i + nums[i]);

            // If the maximum reachable position is greater than or equal to the last index, return true
            if (maxReach >= n - 1) {
                return true;
            }
        }

        return false;
    }
};

Question 52: You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].
Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:
0 <= j <= nums[i] and
i + j < n
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].

Example 1:

Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.

Solution:
#include <vector>

class Solution {
public:
    int jump(std::vector<int>& nums) {
        int n = nums.size();
        int jumps = 0;
        int currentMaxReach = 0;
        int nextMaxReach = 0;

        for (int i = 0; i < n - 1; ++i) {
            nextMaxReach = std::max(nextMaxReach, i + nums[i]);

            if (i == currentMaxReach) {
                currentMaxReach = nextMaxReach;
                jumps++;
            }
        }

        return jumps;
    }
};

Question 53: Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return the researcher's h-index.
According to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times.
Example 1:

Input: citations = [3,0,6,1,5]
Output: 3
Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.
Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.

Solution :
#include <vector>
#include <algorithm>

class Solution {
public:
    int hIndex(std::vector<int>& citations) {
        std::sort(citations.begin(), citations.end(), std::greater<int>());
        
        int n = citations.size();
        int h = 0;

        for (int i = 0; i < n; ++i) {
            if (citations[i] >= i + 1) {
                h = std::max(h, i + 1);
            } else {
                // If the current citation is less than the current index, further elements will also be less
                break;
            }
        }

        return h;
    }
};

Question 54 :Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.
 
Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]

Solution :
#include <vector>

class Solution {
public:
    std::vector<int> productExceptSelf(std::vector<int>& nums) {
        int n = nums.size();
        std::vector<int> left(n, 1);   // Initialize left array
        std::vector<int> right(n, 1);  // Initialize right array
        std::vector<int> result(n, 1); // Initialize result array

        // Compute left array
        int leftProduct = 1;
        for (int i = 1; i < n; ++i) {
            leftProduct *= nums[i - 1];
            left[i] = leftProduct;
        }

        // Compute right array
        int rightProduct = 1;
        for (int i = n - 2; i >= 0; --i) {
            rightProduct *= nums[i + 1];
            right[i] = rightProduct;
        }

        // Compute result array
        for (int i = 0; i < n; ++i) {
            result[i] = left[i] * right[i];
        }

        return result;
    }
};

Question 55 :There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].
You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.
Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique

Example 1:

Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
Output: 3
Explanation:
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
Therefore, return 3 as the starting index

solution :
#include <vector>

class Solution {
public:
    int canCompleteCircuit(std::vector<int>& gas, std::vector<int>& cost) {
        int n = gas.size();
        int totalGas = 0;
        int currentTank = 0;
        int startingStation = 0;

        for (int i = 0; i < n; ++i) {
            int netGas = gas[i] - cost[i];
            totalGas += netGas;
            currentTank += netGas;

            // If the current tank becomes negative, reset it and update the starting station
            if (currentTank < 0) {
                currentTank = 0;
                startingStation = i + 1;
            }
        }

        // If the total gas is negative, return -1; otherwise, return the starting station
        return (totalGas < 0) ? -1 : startingStation;
    }
};


Question 56 : Given a string s consisting of words and spaces, return the length of the last word in the string.
A word is a maximal substring consisting of non-space characters only.

Example 1:

Input: s = "Hello World"
Output: 5
Explanation: The last word is "World" with length 5.

Solution :

#include <iostream>
#include <string>

class Solution {
public:
    int lengthOfLastWord(std::string s) {
        int length = 0;
        int i = s.length() - 1;

        // Skip trailing spaces
        while (i >= 0 && s[i] == ' ') {
            i--;
        }

        // Count the length of the last word
        while (i >= 0 && s[i] != ' ') {
            length++;
            i--;
        }

        return length;
    }
};

int main() {
    Solution solution;

    // Example 1
    std::string s1 = "Hello World";
    std::cout << "Example 1: " << solution.lengthOfLastWord(s1) << std::endl;

    // Example 2
    std::string s2 = "   fly me   to   the moon  ";
    std::cout << "Example 2: " << solution.lengthOfLastWord(s2) << std::endl;

    return 0;
}


Question 57 :Write a function to find the longest common prefix string amongst an array of strings.
If there is no common prefix, return an empty string "".

Example 1:

Input: strs = ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.

Solution : #include <iostream>
#include <vector>
#include <string>

class Solution {
public:
    std::string longestCommonPrefix(std::vector<std::string>& strs) {
        if (strs.empty()) {
            return ""; // If the input vector is empty, return an empty string
        }

        // Iterate through characters in the first string
        for (int i = 0; i < strs[0].length(); i++) {
            // Check the current character against the same position in other strings
            for (int j = 1; j < strs.size(); j++) {
                // If the current character is not common, return the prefix found so far
                if (i >= strs[j].length() || strs[j][i] != strs[0][i]) {
                    return strs[0].substr(0, i);
                }
            }
        }

        // If the loop completes, the entire first string is a common prefix
        return strs[0];
    }
};

int main() {
    Solution solution;

    // Example 1
    std::vector<std::string> strs1 = {"flower", "flow", "flight"};
    std::cout << "Example 1: " << solution.longestCommonPrefix(strs1) << std::endl;

    // Example 2
    std::vector<std::string> strs2 = {"dog", "racecar", "car"};
    std::cout << "Example 2: " << solution.longestCommonPrefix(strs2) << std::endl;

    return 0;
}


Question 58 : Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.


Example 1:

Input: haystack = "sadbutsad", needle = "sad"
Output: 0
Explanation: "sad" occurs at index 0 and 6.
The first occurrence is at index 0, so we return 0.
Example 2:

Input: haystack = "leetcode", needle = "leeto"
Output: -1
Explanation: "leeto" did not occur in "leetcode", so we return -1.

Solution :
#include <iostream>
#include <string>

class Solution {
public:
    int strStr(std::string haystack, std::string needle) {
        int m = haystack.length();
        int n = needle.length();

        // Check edge cases
        if (n == 0) {
            return 0; // Empty needle, return 0
        }

        if (m < n) {
            return -1; // Needle longer than haystack, not possible
        }

        for (int i = 0; i <= m - n; ++i) {
            int j;
            // Check if needle matches the substring of haystack starting at position i
            for (j = 0; j < n; ++j) {
                if (haystack[i + j] != needle[j]) {
                    break; // Mismatch, break out of the loop
                }
            }

            if (j == n) {
                return i; // Entire needle matches, return the starting index
            }
        }

        return -1; // Needle not found in haystack
    }
};

int main() {
    Solution solution;

    // Example 1
    std::string haystack1 = "sadbutsad";
    std::string needle1 = "sad";
    std::cout << "Example 1: " << solution.strStr(haystack1, needle1) << std::endl;

    // Example 2
    std::string haystack2 = "leetcode";
    std::string needle2 = "leeto";
    std::cout << "Example 2: " << solution.strStr(haystack2, needle2) << std::endl;

    return 0;
}

Question 59 : Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.
You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly maxWidth characters.
Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.
For the last line of text, it should be left-justified, and no extra space is inserted between words.

Solution :

#include <iostream>
#include <vector>
#include <string>

class Solution {
public:
    std::vector<std::string> fullJustify(std::vector<std::string>& words, int maxWidth) {
        std::vector<std::string> result;
        int start = 0;

        while (start < words.size()) {
            int end = start + 1;
            int currentLength = words[start].length();

            // Determine the words to be included in the current line
            while (end < words.size() && currentLength + 1 + words[end].length() <= maxWidth) {
                currentLength += 1 + words[end].length();
                end++;
            }

            // Create the justified line
            std::string line = words[start];
            int extraSpaces = maxWidth - currentLength;

            if (end == words.size() || end - start == 1) {
                // Left-justify the last line or a line with a single word
                for (int i = start + 1; i < end; i++) {
                    line += ' ' + words[i];
                }
                line += std::string(maxWidth - line.length(), ' ');  // Adjust for extra spaces
            } else {
                // Distribute extra spaces between words evenly
                int spacesBetweenWords = extraSpaces / (end - start - 1);
                int extraSpacesLeft = extraSpaces % (end - start - 1);

                for (int i = start + 1; i < end; i++) {
                    int spaces = spacesBetweenWords + (i - start <= extraSpacesLeft ? 1 : 0);
                    line += std::string(spaces, ' ') + words[i];
                }
            }

            result.push_back(line);
            start = end;
        }

        return result;
    }
};

int main() {
    Solution solution;

    // Example 1
    std::vector<std::string> words1 = {"This", "is", "an", "example", "of", "text", "justification."};
    int maxWidth1 = 16;
    std::vector<std::string> result1 = solution.fullJustify(words1, maxWidth1);
    for (const auto& line : result1) {
        std::cout << line << std::endl;
    }

    // Example 2
    std::vector<std::string> words2 = {"What", "must", "be", "acknowledgment", "shall", "be"};
    int maxWidth2 = 16;
    std::vector<std::string> result2 = solution.fullJustify(words2, maxWidth2);
    for (const auto& line : result2) {
        std::cout << line << std::endl;
    }

    return 0;
}

Question 60 : A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.
Given a string s, return true if it is a palindrome, or false otherwise.

Example 1:

Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.
Example 2:

Input: s = "race a car"
Output: false
Explanation: "raceacar" is not a palindrome.

Solution : #include <iostream>
#include <string>
#include <cctype>

class Solution {
public:
    bool isPalindrome(std::string s) {
        // Convert to lowercase and remove non-alphanumeric characters
        std::string modifiedString;
        for (char c : s) {
            if (std::isalnum(c)) {
                modifiedString += std::tolower(c);
            }
        }

        // Check if the modified string is a palindrome
        int left = 0;
        int right = modifiedString.length() - 1;

        while (left < right) {
            if (modifiedString[left] != modifiedString[right]) {
                return false;
            }
            left++;
            right--;
        }

        return true;
    }
};

int main() {
    Solution solution;

    // Example 1
    std::string s1 = "A man, a plan, a canal: Panama";
    std::cout << "Example 1: " << std::boolalpha << solution.isPalindrome(s1) << std::endl;

    // Example 2
    std::string s2 = "race a car";
    std::cout << "Example 2: " << std::boolalpha << solution.isPalindrome(s2) << std::endl;

    return 0;
}

Question 61 : Given two strings s and t, return true if s is a subsequence of t, or false otherwise.
A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).

 
Example 1:

Input: s = "abc", t = "ahbgdc"
Output: true
Example 2:

Input: s = "axc", t = "ahbgdc"
Output: false

Solution :
#include <string>

using namespace std;

class Solution {
public:
    bool isSubsequence(string s, string t) {
        int sIndex = 0, tIndex = 0;

        while (sIndex < s.size() && tIndex < t.size()) {
            if (s[sIndex] == t[tIndex]) {
                sIndex++;
            }
            tIndex++;
        }

        // If sIndex reaches the end of s, all characters in s have been found in order in t
        return sIndex == s.size();
    }
};

Question 62 : Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.
Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.
The tests are generated such that there is exactly one solution. You may not use the same element twice.
Your solution must use only constant extra space.

Example 1:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].
Example 2:

Input: numbers = [2,3,4], target = 6
Output: [1,3]
Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].

Solution :
#include <iostream>
#include <vector>

class Solution {
public:
    std::vector<int> twoSum(std::vector<int>& numbers, int target) {
        int left = 0;
        int right = numbers.size() - 1;

        while (left < right) {
            int sum = numbers[left] + numbers[right];
            if (sum == target) {
                return {left + 1, right + 1}; // Indices are 1-indexed
            } else if (sum < target) {
                left++;
            } else {
                right--;
            }
        }

        // No solution found, return empty vector
        return {};
    }
};

int main() {
    Solution solution;

    // Example 1
    std::vector<int> numbers1 = {2, 7, 11, 15};
    int target1 = 9;
    std::vector<int> result1 = solution.twoSum(numbers1, target1);
    std::cout << "Example 1: [" << result1[0] << ", " << result1[1] << "]" << std::endl;

    // Example 2
    std::vector<int> numbers2 = {2, 3, 4};
    int target2 = 6;
    std::vector<int> result2 = solution.twoSum(numbers2, target2);
    std::cout << "Example 2: [" << result2[0] << ", " << result2[1] << "]" << std::endl;

    return 0;
}


Question 63 : Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter

Solution : #include <iostream>
#include <vector>
#include <algorithm>

class Solution {
public:
    std::vector<std::vector<int>> threeSum(std::vector<int>& nums) {
        std::vector<std::vector<int>> result;
        int n = nums.size();

        // Sort the array
        std::sort(nums.begin(), nums.end());

        for (int i = 0; i < n - 2; ++i) {
            // Skip duplicate triplets
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }

            int target = -nums[i];
            int left = i + 1;
            int right = n - 1;

            while (left < right) {
                int sum = nums[left] + nums[right];

                if (sum == target) {
                    result.push_back({nums[i], nums[left], nums[right]});
                    
                    // Skip duplicate pairs
                    while (left < right && nums[left] == nums[left + 1]) {
                        left++;
                    }
                    while (left < right && nums[right] == nums[right - 1]) {
                        right--;
                    }

                    // Move pointers
                    left++;
                    right--;
                } else if (sum < target) {
                    left++;
                } else {
                    right--;
                }
            }
        }

        return result;
    }
};

int main() {
    Solution solution;

    // Example
    std::vector<int> nums = {-1, 0, 1, 2, -1, -4};
    std::vector<std::vector<int>> result = solution.threeSum(nums);

    std::cout << "Output:" << std::endl;
    for (const auto& triplet : result) {
        std::cout << "[";
        for (int num : triplet) {
            std::cout << num << ",";
        }
        std::cout << "]" << std::endl;
    }

    return 0;
}

